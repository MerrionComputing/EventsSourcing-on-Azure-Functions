<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventSourcingOnAzureFunctions.Common</name>
    </assembly>
    <members>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute">
            <summary>
            An attribute to mark a classifier to get group membership classification information from an event stream by projection
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute.DomainName">
            <summary>
            The domain in which the event stream the classifier will run over is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute.EntityTypeName">
            <summary>
            The type of entity over which this classifier will run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity for which the classifier will run
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute._classifierTypeName">
            <summary>
            The specific classifier type to execute
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttributeBinding.FromAttribute">
            <summary>
            This binding gets its properties from the Attribute 
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttributeBinding.#ctor(System.Reflection.ParameterInfo,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings)">
            <summary>
            Create a new binding for the projection
            </summary>
            <param name="parameter">
            Details of the attribute and parameter to be bound to
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.ClassificationValueBinder.ValidateParameter(System.Reflection.ParameterInfo)">
            <summary>
            This will be expanded out to make sure the domain, aggregate and classification type really exist,
            and are mapped
            </summary>
            <param name="parameter">
            The classification parameter
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.CommandAttribute">
            <summary>
            An attribute to mark a parameter as being a command executor
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.CommandAttribute.DomainName">
            <summary>
            The business domain in which the command is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.CommandAttribute.CommandName">
            <summary>
            The name of the command to run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.CommandAttribute.UniqueIdentifier">
            <summary>
            The unique instance of the command to run
            </summary>
            <remarks>
            If this is not set then a new GUID will be used instead
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.CommandAttributeBinding.FromAttribute">
            <summary>
            This binding gets its properties from the Attribute 
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.ConnectionStringNameAttribute">
            <summary>
            The connection string to use for this aggrgeate class
            </summary>
            <remarks>
            If not set a default one is used based on the domain name and aggregate type
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ConnectionStringNameAttribute.Name">
            <summary>
            The name of the connection string to use when persisting events for this entity to its event stream
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttribute">
            <summary>
            An attribute to mark an event stream to use for output for appending events to
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttribute.DomainName">
            <summary>
            The domain in which this event stream is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttribute.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttribute.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttributeBinding.FromAttribute">
            <summary>
            This binding gets its properties from the Attribute 
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttributeBinding.#ctor(System.Reflection.ParameterInfo,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings)">
            <summary>
            Create a new binding for the event stream
            </summary>
            <param name="parameter">
            Details of the attribute and parameter to be bound to
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttributeBindingProvider">
            <summary>
            Output binding provider to select the event stream on which to append 
            events or run projections or classifiers.
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.EventStreamValueBinder.GetValueAsync">
            <summary>
            Turn the parameter (with attribute) into an EventStream object
            </summary>
            <returns>
            A built [EventStream] object
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.EventStreamValueBinder.ValidateParameter(System.Reflection.ParameterInfo)">
            <summary>
            This will be expanded out to make sure the domain and aggregate really exist,
            and are mapped
            </summary>
            <param name="parameter">
            The EventStream parameter
            </param>
            <returns></returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.EventTriggerAttribute">
            <summary>
            Attribute to be fired whenever a particluar event is written to a domain event stream
            </summary>
            <remarks>
            This will only apply to functions in the same function app - all intra domain communtication
            should be performed by Azure EventGrid
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventTriggerAttribute.DomainName">
            <summary>
            The domain in which the event stream being monitored is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventTriggerAttribute.EntityTypeName">
            <summary>
            The type of entity for which the event stream being monitored pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventTriggerAttribute.EventNameFilter">
            <summary>
            The filter to use to decide what event(s) to respond to
            </summary>
            <remarks>
            This can be set to ALL_EVENT_TYPES to respond regardless of the event type
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.EventTriggerAttribute.InstanceKeyFilter">
            <summary>
            The filter to use to decide what instance key(s) to respond to
            </summary>
            <remarks>
            This can be set to ALL_INSTANCE_KEYS to respond regardless of the instance key
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.EventTriggerAttributeBindingProvider">
            <summary>
            Binding provider to bind the [EventTrigger] attribute
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.NewEntityTriggerAttribute">
            <summary>
            Attribute to be fired whenever an event stream is created for a new entity
            </summary>
            <remarks>
            This will only apply to functions in the same function app - all intra domain communtication
            should be performed by Azure EventGrid
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.NewEntityTriggerAttribute.DomainName">
            <summary>
            The domain in which the event stream being monitored is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.NewEntityTriggerAttribute.EntityTypeName">
            <summary>
            The type of entity for which the event stream being monitored pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.NewEntityTriggerAttribute.InstanceKeyFilter">
            <summary>
            The filter to use to decide what instance key(s) to respond to
            </summary>
            <remarks>
            This can be set to ALL_INSTANCE_KEYS to respond regardless of the instance key
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute">
            <summary>
            An attribute to mark a projection to get state information from an event stream by projection
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute.DomainName">
            <summary>
            The domain in which the event stream the projection will run over is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute.EntityTypeName">
            <summary>
            The type of entity over which this projection will run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity for which the projection will run
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute._projectionTypeName">
            <summary>
            The specific projection type to execute
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttributeBinding.FromAttribute">
            <summary>
            This binding gets its properties from the Attribute 
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttributeBinding.#ctor(System.Reflection.ParameterInfo,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings)">
            <summary>
            Create a new binding for the projection
            </summary>
            <param name="parameter">
            Details of the attribute and parameter to be bound to
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttributeBindingProvider">
            <summary>
            Output binding provider to select the projection runner to run for a function
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Binding.ProjectionValueBinder.ValidateParameter(System.Reflection.ParameterInfo)">
            <summary>
            This will be expanded out to make sure the domain, aggregate and projection type really exist,
            and are mapped
            </summary>
            <param name="parameter">
            The Projection parameter
            </param>
            <returns></returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Binding.QueryAttribute">
            <summary>
            An attribute to mark a query to be run by a serverless function
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.QueryAttribute.DomainName">
            <summary>
            The business domain in which the query is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.QueryAttribute.QueryName">
            <summary>
            The name of the query to run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.QueryAttribute.UniqueIdentifier">
            <summary>
            The unique instance of the query to run
            </summary>
            <remarks>
            If this is not set then a new GUID will be used instead
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Binding.QueryAttributeBinding.FromAttribute">
            <summary>
            This binding gets its properties from the Attribute 
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings">
            <summary>
            Bindings to use for the different event sourcing extensions
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings.InitializeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initialise any common services for dependency injection
            </summary>
            <param name="services">
            The service collection to which common services can be added
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings.InitializeInjectionConfiguration(Microsoft.Azure.WebJobs.Host.Config.ExtensionConfigContext)">
            <summary>
            Initialise any common dependency injection configuration settings
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings.BuildEventStreamFromAttribute(EventSourcingOnAzureFunctions.Common.Binding.EventStreamAttribute,Microsoft.Azure.WebJobs.Host.Bindings.ValueBindingContext)">
            <summary>
            Create a new event stream from the attribute passed in
            </summary>
            <param name="attribute">
            The EventStreamAttribute tagging the parameter to crreate by dependency injection
            </param>
            <param name="context">
            The context within which this binding is occuring
            </param>
            <returns>
            A task that can create an event stream when required
            </returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings.AppendBlobConnectionSettings">
            <summary>
            Settings that can be set for an append blob backed event stream
            </summary>
            <remarks>
            ImplementationType=AzureBlob;ConnectionStringName=LeaguesConnectionString;DomainName=Leagues
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings.TableConnectionSettings">
            <summary>
            Settings that can be set for an azure table backed event stream
            </summary>
            <remarks>
            ImplementationType=AzureTable;ConnectionStringName;LeaguesConnectionString;SequenceNumberFormat=00000000
            </remarks>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.CQRSAzureBindings.TableConnectionSettings._sequenceNumberFormat">
            <summary>
            The format to use when storing the sequence number as a string
            </summary>
            <remarks>
            This is usually zero-padded to make indexing faster and sequence easier
            to read
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.ConnectionSettingsBase">
            <summary>
            Properties shared by all the different types of connection settings
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.ConnectionSettingsBase.SettingType">
            <summary>
            The type of setting this pertains to 
            </summary>
            <remarks>
            EventStream or Snapshot
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.ConnectionSettingsBase.MappedDomainName">
            <summary>
            The domain name the event stream entity belongs to
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.ConnectionSettingsBase.MappedEntityTypeName">
            <summary>
            The entity type that the event stream is mapped to
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.ConnectionSettingsBase.#ctor(System.String)">
            <summary>
            Create the settings base from the config property name(dot separated)
            </summary>
            <param name="settingName">
            The unique name of the setting e.g.
            EventSteam.Leagues.League
            Snapshot.Leagues.League.League_Summary_Information etc.
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.DomainName">
            <summary>
            The domain name of the event stream over which the classification is 
            to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.EntityTypeName">
            <summary>
            The entity type for which the classification will be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.InstanceKey">
            <summary>
            The unique instance of the event stream over which the 
            classification should run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.ClassifierTypeName">
            <summary>
            The name of the classification to run over that event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.AsOfDate">
            <summary>
            The date up-to which we want the classification to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.DateLogged">
            <summary>
            The date/time the classification request was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.CorrelationIdentifier">
            <summary>
            An unique identifier set by the caller to trace this classifier operation
            </summary> 
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.Parameters">
            <summary>
            Any parameters included in the classifier request
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.#ctor">
            <summary>
            Parameter-less constructor for serialisation
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.FromQueuedMessage(System.String)">
            <summary>
            Turn a queue notification message back into a projection requested event
            </summary>
            <param name="queuedMessage">
            The message sent by the <see cref="T:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher"/> for the command or query
            </param>
            <returns>
            If the string can be turned into a projection request then it is - otherwise null
            </returns>
            <remarks>
            Message is pipe separated
            E|Projection Requested|{command/query id}|{command/query sequence number}|null||{ProjectionDomainName}|{ProjectionEntityTypeName}|{ProjectionInstanceKey}|{ProjectionTypeName}|{AsOfDate}|{CorrelationIdentifier}
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested.ToQueueMessage(EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequested)">
            <summary>
            Turn a classification requested event to the <see cref="T:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher"/> type of message
            </summary>
            <param name="evtPayload">
            The event for a classification being requested
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequestParameterSet.CorrelationIdentifier">
            <summary>
            An unique identifier set by the caller to trace this classifier operation
            </summary> 
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequestParameterSet.ParameterName">
            <summary>
            The name of the classification parameter
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierRequestParameterSet.ParameterValue">
            <summary>
            The value assigned to the parameter
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.DomainName">
            <summary>
            The domain name of the event stream over which the classifier was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.EntityTypeName">
            <summary>
            The entity type for which the classifier was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.InstanceKey">
            <summary>
            The unique instance of the event stream over which the 
            classifier was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.ClassifierTypeName">
            <summary>
            The name of the classifier we ran over that event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.AsOfDate">
            <summary>
            The date up-to which the classifier was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.AsOfSequenceNumber">
            <summary>
            The sequence number of the last event read when running the classifier
            </summary>
            <remarks>
            This can be used for concurrency protection
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.Result">
            <summary>
            The result of the classification - is this instance a member of whatever
            group clause the classification represents
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.ClassifierResultReturned.CorrelationIdentifier">
            <summary>
            An unique identifier set by the caller to trace this classifier operation
            </summary> 
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.IClassifierRequest.DomainName">
            <summary>
            The domain name of the event stream over which the projection is 
            to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.IClassifierRequest.EntityTypeName">
            <summary>
            The entity type for which the classifier will be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.IClassifierRequest.InstanceKey">
            <summary>
            The unique instance of the event stream over which the 
            classifier should run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.IClassifierRequest.ClassifierTypeName">
            <summary>
            The name of the classifier to run over that event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Events.IClassifierRequest.AsOfDate">
            <summary>
            The date up-to which we want the classifier to be run
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData">
            <summary>
            The data sent in an OnClassificationRequested event
            </summary>
            <remarks>
                "data": { 
                     "notificationId": "6eb417e5d301402a96d212db3601caa5", 
                     "domainName": "Bank", 
                     "entityTypeName": "Query", --or "Command", 
                     "instanceKey": "a2a92eda-0ebc-4ca6-8f0e-27a867f6a2fe", 
                     "commentary": null, 
                     "eventType": "Classification Requested", 
                     "sequenceNumber": 1320, 
                     "eventPayload": {  --from ClassifierRequested event
                         "domainName": "Bank", 
                         etc..
                         }, 
                    "context": { 
                        "Who": null, 
                        "Source": "WithdrawMoney", 
                        "Commentary": null, 
                        "CorrelationIdentifier": null, 
                        "CausationIdentifier": "e9d72eda-0ebc-4c66-8fce-27a867f6f2fe", 
                        "SchemaName": null } 
                 }
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.DomainName">
            <summary>
            The domain in which the classifier is to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.EntityTypeName">
            <summary>
            The type of entity for which the classifier is to be run 
            </summary>
            <remarks>
            Can be "Query" or "Command" 
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.InstanceKey">
            <summary>
            The unique identifier of the command or query for which the classifier 
            is to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.Commentary">
            <summary>
            Additional commentary about the classifier request
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.EventType">
            <summary>
            The event type that caused this request to be handled
            </summary>
            <remarks>
            Should be "Classification Requested"
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.SequenceNumber">
            <summary>
            The sequence number in the command or query event stream of this request
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.ClassifierRequest">
            <summary>
            The detail of what classification has been requested
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData.Context">
            <summary>
            The context that this request was issued for
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions">
            <summary>
            Event Grid triggered functions used to run classifications for commands and queries
            </summary>
            <remarks>
            There are separate functions for handling classifications for commands and queries as,
            although they are very similar, we might want to separate them completely
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions.OnQueryClassificationHandler(Azure.Messaging.EventGrid.EventGridEvent)">
            <summary>
            A classification has been requested in processing a query.  This
            function will run it and attach the result back to the query
            event stream when complete
            </summary>
            <param name="eventGridEvent">
            The event grid notification that triggered the request for the
            classification to be run
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions.RunClassificationForQueryCommand(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Force run a classification for the given query instance
            </summary>
            <param name="req"></param>
            <param name="queryIdentifier">
            The unique identifier of the query instance for which the query should be run
            </param>
            <returns>
            HTTP code indicating success
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions.RunClassificationForQuery(EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData)">
            <summary>
            A classification has been requested in processing a query.  
            This function will run it and attach the result back to the query
            event stream when complete.
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions.RunClassificationForCommand(EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierRequestedEventGridEventData)">
            <summary>
            A classification has been requested in processing a command.  
            This function will run it and attach the result back to the command
            event stream when complete.
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions.RunClassificationForCommandCommand(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Force run a classification for the given command instance
            </summary>
            <param name="req"></param>
            <param name="commandIdentifier">
            The unique identifier of the command instance for which the query should be run
            </param>
            <returns>
            HTTP code indicating success
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ClassifierHandler.Functions.ClassifierHandlerFunctions.OnCommandClassificationHandler(Azure.Messaging.EventGrid.EventGridEvent)">
            <summary>
            A classification has been requested in processing a command.  This
            function will run it and attach the result back to the command
            event stream when complete
            </summary>
            <param name="eventGridEvent">
            The event grid notification that triggered the request for the
            classification to be run
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.Command">
            <summary>
            A wrapper class used to trigger and manage a query orchestration
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Command.DomainName">
            <summary>
            The business domain in which the command is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Command.CommandName">
            <summary>
            The name of the command to run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Command.UniqueIdentifier">
            <summary>
            The unique instance of the command to run
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.Create(System.String,System.String,System.String)">
            <summary>
            Create the new query orchestration to be processed
            </summary>
            <param name="ExternalSystemUniqueIdentifier">
            (Optional) A unique identifier for this query as passed in by an external system
            </param>
            <param name="AuthorisationToken">
            (Optional) A token to use for authorisation(s) checking within this query
            </param>
            <param name="ExternalOrchestrationIdentifier">
            (optional) An unique identifier to use if this query is being orchestrated by an external
            system which uses its own provided unique identifiers
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.GetParameterValue(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get the current value set for a parameter
            </summary>
            <param name="parameterName">
            The name of the parameter to get
            </param>
            <param name="asOfDate">
            (Optional) The as-of date for which to get the parameter value
            </param>
            <returns>
            If no parameter with the given name exists this will return null
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.GetParameterValues(System.Nullable{System.DateTime})">
            <summary>
            Get the current values set of the parameters of this command
            </summary>
            <param name="asOfDate">
            (Optional) The as-of date for which to get the parameter values
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.GetExecutionState">
            <summary>
            Get the current execution state of this command
            </summary>
            <remarks>
            This can be used to decide whether to retry a failed command or 
            to perform post-completion processing etc.
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.Cancel(System.String,System.Boolean)">
            <summary>
            Cancel this command 
            </summary>
            <param name="Notes">
            Notes to add to the command to describe why/how it was cancelled
            </param>
            <param name="CompensationInitiated">
            Whether to kick off compensating actions for this command to undo what it has
            done so far
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.InitiateStep(System.String,System.String,System.String,System.String)">
            <summary>
            Initiate a command step
            </summary>
            <param name="stepName">
            The name of the step to run
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.StepCompleted(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Mark a command step as being completed
            </summary>
            <param name="stepName">
            The name of the step that has been completed
            </param>
            <param name="completionMessage">
            Additional text for the step completion
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.RequestClassification(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Request a classification to be performed as part of this query
            </summary>
            <param name="domainName">
            The domain name of the entity over which the classification is to run
            </param>
            <param name="entityTypeName">
            The entity type over which to run the classification
            </param>
            <param name="instanceKey">
            The specific instance over which to run the classification
            </param>
            <param name="classifierTypeName">
            The specific type of classification process to run over the event stream
            </param>
            <param name="asOfDate">
            (Optional) The date up to which to run the classification
            </param>
            <param name="classificationParameters">
            (Optional) Any additional parameters to use in the classification process
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.PostClassifierResponse(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Int32,EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.ClassificationResults)">
            <summary>
            Post a response from a classifier onto the given query event stream
            </summary>
            <param name="domainName">
            The domain name of the entity over which the classification was run
            </param>
            <param name="entityTypeName">
            The entity type over which the classification was run
            </param>
            <param name="instanceKey">
            The specific instance over which the classification was run
            </param>
            <param name="classifierTypeName">
            The specific type of classification process to run over the event stream
            </param>
            <param name="asOfDate">
            (Optional) The date up to which to run the classification
            </param>
            <param name="correlationIdentifier">
            The unique identifier for this classification instance
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event read when running the classifier
            (This can be used to determine if the classification is still valid)
            </param> 
            <param name="result">
            The result of running the classifier
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.GetOutstandingClassifiers">
            <summary>
            Gets the set of projection requests outstanding for this query 
            </summary>
            <returns>
            The set of projection requests with no matching response
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.RequestProjection(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Request a projection to be performed
            </summary>
            <param name="domainName">
            The domain name of the entity over which the classification is to run
            </param>
            <param name="entityTypeName">
            The entity type over which to run the classification
            </param>
            <param name="instanceKey">
            The specific instance over which to run the classification
            </param>
            <param name="classifierTypeName">
            The specific type of classification process to run over the event stream
            </param>
            <param name="asOfDate">
            (Optional) The date up to which to run the classification
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.GetOutstandingProjections">
            <summary>
            Gets the set of projection requests outstanding for this command 
            </summary>
            <returns>
            The set of projection requests with no matching response
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.Delete">
            <summary>
            Delete the command backing event stream
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Command.MakeDomainCommandName(System.String)">
            <summary>
            Make a "commands" domain for the given top level domain
            </summary>
            <param name="domainName">
            The top level (business) domain
            </param>
            <remarks>
            This allows different domains' command names to be unique even if
            the base command names are not
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Classifications.Completed">
            <summary>
            A classification to denote that a command execution has completed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Classifications.InError">
            <summary>
            A classification to denote that a command execution has had a fatal error
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.CommandExecutionState">
            <summary>
            The current state of a command execution
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.CommandExecutionState.CurrentStatus">
            <summary>
            The current status of the command 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.CommandExecutionState.Message">
            <summary>
            Additional message of the command execution state
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.CommandExecutionState.AsOfSequenceNumber">
            <summary>
            The sequence number as-of which thsi status was in force
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandCancelled">
            <summary>
            A multi-step (event stream backed) command has been cancelled
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandCancelled.CompensationInitiated">
            <summary>
            Did the cancellation initiate a rollback via compensating events
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandCancelled.DateCancelled">
            <summary>
            The date/time the command was cancelled
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandCancelled.Notes">
            <summary>
            Commentary on why the command that has been cancelled
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Completed">
            <summary>
            A multi-step (event stream backed) command has completed
            </summary>
            <remarks>
            Once a query is tagged as completed it cannot be reopened so this 
            should be the last event in the event stream
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Completed.DateCompleted">
            <summary>
            The date/time the command was completed by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Completed.Notes">
            <summary>
            Commentary on the command that has completed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Created">
            <summary>
            A new command instance was created
            </summary>
            <remarks>
            This provides additional information above and beyond what is available in the command event 
            stream created notification
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Created.DateLogged">
            <summary>
            The date/time the new command was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Created.ExternalSystemUniqueIdentifier">
            <summary>
            If the system that initiated this command has its own way of identifying command instances
            this will be recorded here
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Created.AuthorisationToken">
            <summary>
            For commands that rely on authorisation this is the token passed in to test
            for the authorisation process
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.Created.ExternalOrchestrationIdentifier">
            <summary>
            If the system that initiated this command has its own orchestration process (for example with
            durable functions) this uniquely identifies that orchestration instance
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted">
            <summary>
            A named step that is part of executing this command has completed
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.StepName">
            <summary>
            The name of the step that was just completed
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.StepInstance">
            <summary>
            The instance of this step that was run 
            </summary>
            <remarks>
            This allows for commands that have to run the smae step for multiple 
            times or for multiple parameters
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.Message">
            <summary>
            The message returned in completing the step
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.DateLogged">
            <summary>
            The date/time the command step completion was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.DomainName">
            <summary>
            The domain of the entity to which the command step was applied
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.EntityTypeName">
            <summary>
            The entity type of the entity to which the command step was applied
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.StepCompleted.InstanceKey">
            <summary>
            The instance unique key of the entity to which the command step was applied
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandStepInitiated">
            <summary>
            A processing step was initiated for a given command
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandStepInitiated.StepName">
            <summary>
            The name of the step that was initiated
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandStepInitiated.StepInstance">
            <summary>
            The instance of this step that is to be run 
            </summary>
            <remarks>
            This allows for commands that have to run the smae step for multiple 
            times or for multiple parameters
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandStepInitiated.DomainName">
            <summary>
            The domain of the entity to which the command step is being applied
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandStepInitiated.EntityTypeName">
            <summary>
            The entity type of the entity to which the command step is being applied
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.CommandStepInitiated.InstanceKey">
            <summary>
            The instance unique key of the entity to which the command step is being applied
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.FatalErrorOccured">
            <summary>
            A fatal error has occured when processing this command
            </summary>
            <remarks>
            If there are rollbacks or compensating events to be performed 
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.FatalErrorOccured.DateLogged">
            <summary>
            The date/time the error was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Events.FatalErrorOccured.Message">
            <summary>
            The text message explaining what the error was
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Functions.CommandHandlerFunctions">
            <summary>
            Functions to interact with command instances 
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Functions.CommandHandlerFunctions.GetCommandState(System.Net.Http.HttpRequestMessage,System.String,System.String,System.String)">
            <summary>
            Get the state of the specified command
            </summary>
            <param name="req">
            The HTTP request that triggered this function
            </param>
            <param name="domainName">
            The domain in which this command instance was run
            </param>
            <param name="commandName">
            The name of the type of command that was run
            </param>
            <param name="commandIdentifier">
            The specific instance of the command that was run
            </param>
            <returns>
            A record containing the state of the command as at the point the query was executed
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Functions.CommandHandlerFunctions.CancelCommand(System.Net.Http.HttpRequestMessage,System.String,System.String,System.String)">
            <summary>
            Cancel an in-flight command
            </summary>
            <param name="req">
            The HTTP request that triggered this function
            </param>
            <param name="domainName">
            The domain in which this command instance was run
            </param>
            <param name="commandName">
            The name of the type of command that was run
            </param>
            <param name="commandIdentifier">
            The specific instance of the command that was run
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Projections.ExecutionState">
            <summary>
            A projection to get the execution state (Running, Error, Completed) 
            for a given command instance
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Projections.ExecutionState.CurrentStatus">
            <summary>
            The command status as at when the projection was executed
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Projections.ExecutionState.CurrentStep">
            <summary>
            The name of the step currently being executed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.CommandHandler.Projections.ParameterValues">
            <summary>
            A projection to get the current set of parameters and their values 
            for any given command
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ParameterValueSet">
            <summary>
            A parameter to be used when executing the command or query has been set
            </summary>
            <remarks>
            Each parameter gets its own event so that they can be overwritten during the 
            processing of the command if needed
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ParameterValueSet.Name">
            <summary>
            The name of the parameter
            </summary>
            <remarks>
            This needs to be unique within the context of this command
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ParameterValueSet.Value">
            <summary>
            The value for the parameter
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ValidationCompleted.ErrorsEnountered">
            <summary>
            Were any errors encountered while validating this command or 
            query
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ValidationCompleted.ValidationMessage">
            <summary>
            The validation message to log for the completion of the validation step
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ValidationError">
            <summary>
            A validation error occured with the parameters for a command or query
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ValidationError.Name">
            <summary>
            The name of the parameter that had a validation error
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ValidationError.Fatal">
            <summary>
            Does the validation error prevent the command or query from proceeding
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Common.Events.ValidationError.Message">
            <summary>
            The message to go along with the validation notification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.IProjectionRequest.ProjectionDomainName">
            <summary>
            The domain name of the event stream over which the projection is 
            to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.IProjectionRequest.ProjectionEntityTypeName">
            <summary>
            The entity type for which the projection will be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.IProjectionRequest.ProjectionInstanceKey">
            <summary>
            The unique instance of the event stream over which the 
            projection should run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.IProjectionRequest.ProjectionTypeName">
            <summary>
            The name of the projection to run over that event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.IProjectionRequest.AsOfDate">
            <summary>
            The date up-to which we want the projection to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.IProjectionRequest.CorrelationIdentifier">
            <summary>
            An unique identifier set by the caller to trace this projection operation
            </summary> 
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested">
            <summary>
            A projection was requested to be executed as part of a command or query
            </summary>
            <remarks>
            This event does not need to store who requested the projection as that can 
            be derived from whatever event stream it is appended to
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.ProjectionDomainName">
            <summary>
            The domain name of the event stream over which the projection is 
            to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.ProjectionEntityTypeName">
            <summary>
            The entity type for which the projection will be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.ProjectionInstanceKey">
            <summary>
            The unique instance of the event stream over which the 
            projection should run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.ProjectionTypeName">
            <summary>
            The name of the projection to run over that event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.AsOfDate">
            <summary>
            The date up-to which we want the projection to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.DateLogged">
            <summary>
            The date/time the projection request was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.CorrelationIdentifier">
            <summary>
            An unique identifier set by the caller to trace this projection operation
            </summary> 
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.#ctor">
            <summary>
            Parameterless constructor for serialisation
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.FromQueuedMessage(System.String)">
            <summary>
            Turn a queue notification message back into a projection requested event
            </summary>
            <param name="queuedMessage">
            The message sent by the <see cref="T:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher"/> for the command or query
            </param>
            <returns>
            If the string can be turned into a projection request then it is - otherwise null
            </returns>
            <remarks>
            Message is pipe separated
            E|Projection Requested|{command/query id}|{command/query sequence number}|null||{ProjectionDomainName}|{ProjectionEntityTypeName}|{ProjectionInstanceKey}|{ProjectionTypeName}|{AsOfDate}|{CorrelationIdentifier}
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested.ToQueueMessage(EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionRequested)">
            <summary>
            Turn a projection requested event to the <see cref="T:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher"/> type of message
            </summary>
            <param name="evtPayload">
            The event for a projection being requested
            </param>
            <returns></returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned">
            <summary>
            The result of running a projection has been returned to the requester
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.ProjectionDomainName">
            <summary>
            The domain name of the event stream over which the projection was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.ProjectionEntityTypeName">
            <summary>
            The entity type for which the projection was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.ProjectionInstanceKey">
            <summary>
            The unique instance of the event stream over which the 
            projection was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.ProjectionTypeName">
            <summary>
            The name of the projection we ran over that event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.AsOfDate">
            <summary>
            The date up-to which we wanted the projection to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.AsOfSequenceNumber">
            <summary>
            The sequence number of the last event read when running the projection
            </summary>
            <remarks>
            This can be used for concurrency protection
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.Value">
            <summary>
            The value returned from the projection
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.DateLogged">
            <summary>
            The date/time the projection response was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Events.ProjectionValueReturned.CorrelationIdentifier">
            <summary>
            An unique identifier set by the caller to trace this projection operation
            </summary> 
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions">
            <summary>
            Functions used to run projections for commands and queries
            </summary>
            <remarks>
            There are separate functions for handling projections for commands and queries as,
            although they are very similar, we might want to separate them completely.
            
            Note that the functions runtime cannot discover functions declared in an imported library
            unless <FunctionsInDependencies>true</FunctionsInDependencies> is added to its project
            file
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions.RunProjectionForQueryCommand(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Force run a projection for the given query instance
            </summary>
            <param name="req">
            The HTTP request
            </param>
            <param name="queryIdentifier">
            The unique identifier of the query instance for which the projection should be run
            </param>
            <returns>
            HTTP code indicating success
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions.OnQueryProjectionHandler(Azure.Messaging.EventGrid.EventGridEvent)">
            <summary>
            A projection has been requested in processing a query.  This
            function will run it and attach the result back to the query
            event stream when complete
            </summary>
            <param name="eventGridEvent">
            The event grid notification that triggered the request for the
            projection to be run
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions.RunProjectionForQuery(EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData)">
            <summary>
            A projection has been requested in processing a query.  
            This function will run it and attach the result back to the query
            event stream when complete.
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions.OnCommandProjectionHandler(Azure.Messaging.EventGrid.EventGridEvent)">
            <summary>
            A projection has been requested in processing a command.  This
            function will run it and attach the result back to the command
            event stream when complete
            </summary>
            <param name="eventGridEvent">
            The event grid notification that triggered the request for the
            projection to be run
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions.RunProjectionForCommandCommand(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Run the requested projection for the command and put the resuklts back on the
            event stream for that command
            </summary>
            <param name="req">
            The HTTP request with the projection request details in the body
            </param>
            <param name="commandIdentifier">
            The unique identifier of the command for which this projection should be
            run
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionHandlerFunctions.RunProjectionForCommand(EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData)">
            <summary>
            A projection has been requested in processing a command.  
            This function will run it and attach the result back to the command
            event stream when complete.
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData">
            <summary>
            The data sent in an OnProjectionRequested event
            </summary>
            <remarks>
                "data": { 
                     "notificationId": "6eb417e5d301402a96d212db3601caa5", 
                     "domainName": "Bank", 
                     "entityTypeName": "Query", --or "Command", 
                     "instanceKey": "a2a90eda-0ebc-4ca6-8f0e-27a867f6a2fe", 
                     "commentary": null, 
                     "eventType": "Projection Requested", 
                     "sequenceNumber": 10, 
                     "eventPayload": {  --from ProjectionRequested event
                         "domainName": "Bank", 
                         etc..
                         }, 
                    "context": { 
                        "Who": null, 
                        "Source": "WithdrawMoney", 
                        "Commentary": null, 
                        "CorrelationIdentifier": null, 
                        "CausationIdentifier": "e9d72eda-0ebc-4c66-8fce-27a867f6f2fe", 
                        "SchemaName": null } 
                 }
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.DomainName">
            <summary>
            The domain in which the projection is to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.EntityTypeName">
            <summary>
            The type of entity for which the projection is to be run 
            </summary>
            <remarks>
            Can be "Query" or "Command" 
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.InstanceKey">
            <summary>
            The unique identifier of the command or query for which the projection 
            is to be run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.Commentary">
            <summary>
            Additional commentary about the projection request
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.EventType">
            <summary>
            The event type that caused this request to be handled
            </summary>
            <remarks>
            Should be "Projection Requested"
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.SequenceNumber">
            <summary>
            The sequence number in the command or query event stream of this request
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.ProjectionRequest">
            <summary>
            The detail of what projection has been requested
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Functions.ProjectionRequestedEventGridEventData.Context">
            <summary>
            The context that this request was issued for
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Projections.OutstandingProjections">
            <summary>
            The projection to get the list of all projection requests outstanding for a
            given command or query
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.ProjectionHandler.Projections.OutstandingProjections.ProjectionsToBeProcessed">
            <summary>
            The set of projections that still need to be processed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.Query">
            <summary>
            A wrapper class used to trigger and manage a query orchestration
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Query.DomainName">
            <summary>
            The business domain in which the query is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Query.QueryName">
            <summary>
            The name of the query to run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.Query.UniqueIdentifier">
            <summary>
            The unique instance of the query to run
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.Create(System.String,System.String,System.String)">
            <summary>
            Create the new query orchestration to be processed
            </summary>
            <param name="ExternalSystemUniqueIdentifier">
            (Optional) A unique identifier for this query as passed in by an external system
            </param>
            <param name="AuthorisationToken">
            (Optional) A token to use for authorisation(s) checking within this query
            </param>
            <param name="ExternalOrchestrationIdentifier">
            (optional) An unique identifier to use if this query is being orchestrated by an external
            system which uses its own provided unique identifiers
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.SetParameter(System.String,System.Object)">
            <summary>
            Set a parameter to be used for the query
            </summary>
            <param name="parameterName">
            The name of the query parameter
            </param>
            <param name="parameterValue">
            The value to use for that parameter
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.RequestClassification(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Request a classification to be performed as part of this query
            </summary>
            <param name="domainName">
            The domain name of the entity over which the classification is to run
            </param>
            <param name="entityTypeName">
            The entity type over which to run the classification
            </param>
            <param name="instanceKey">
            The specific instance over which to run the classification
            </param>
            <param name="classifierTypeName">
            The specific type of classification process to run over the event stream
            </param>
            <param name="asOfDate">
            (Optional) The date up to which to run the classification
            </param>
            <param name="classificationParameters">
            (Optional) Any additional parameters to use in the classification process
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.PostClassifierResponse(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Int32,EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.ClassificationResults)">
            <summary>
            Post a response from a classifier onto the given query event stream
            </summary>
            <param name="domainName">
            The domain name of the entity over which the classification was run
            </param>
            <param name="entityTypeName">
            The entity type over which the classification was run
            </param>
            <param name="instanceKey">
            The specific instance over which the classification was run
            </param>
            <param name="classifierTypeName">
            The specific type of classification process to run over the event stream
            </param>
            <param name="asOfDate">
            (Optional) The date up to which to run the classification
            </param>
            <param name="correlationIdentifier">
            The unique identifier for this classification instance
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event read when running the classifier
            (This can be used to determine if the classification is still valid)
            </param> 
            <param name="result">
            The result of running the classifier
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.GetOutstandingClassifiers">
            <summary>
            Gets the set of projection requests outstanding for this query 
            </summary>
            <returns>
            The set of projection requests with no matching response
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.RequestProjection(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Request a projection to be performed
            </summary>
            <param name="domainName">
            The domain name of the entity over which the classification is to run
            </param>
            <param name="entityTypeName">
            The entity type over which to run the classification
            </param>
            <param name="instanceKey">
            The specific instance over which to run the classification
            </param>
            <param name="classifierTypeName">
            The specific type of classification process to run over the event stream
            </param>
            <param name="asOfDate">
            (Optional) The date up to which to run the classification
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.PostProjectionResponse(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Int32,System.Object)">
            <summary>
            Post the response from running the requested projection onto the query 
            event stream so it can be used for further processing
            </summary>
            <param name="domainName">
            The domain the projection was run in
            </param>
            <param name="entityTypeName">
            The entity type for which the projection was run
            </param>
            <param name="instanceKey">
            The unique identifier of the entity for which the projection was run
            </param>
            <param name="projectionTypeName">
            The type of projection that was run over that entity
            </param>
            <param name="asOfDate">
            The as-of date for which the projection response was valid
            </param>
            <param name="correlationIdentifier">
            Unique identifier correlating projection requests/responses
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event read running this projection
            </param>
            <param name="projectionResult">
            The actual result of running the projection
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.GetOutstandingProjections">
            <summary>
            Gets the set of projection requests outstanding for this query 
            </summary>
            <returns>
            The set of projection requests with no matching response
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.RunCollationProjection``1(System.String)">
            <summary>
            Run a projection over this query event stream to give the collated results
            </summary>
            <typeparam name="TProjectionResult">
            The data type of the collation result
            </typeparam>
            <param name="collationProjectionName">
            The projection name to perform the collation function
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.AddStorageBlobOutput(System.Uri,System.Uri)">
            <summary>
            Add an azure storage blob target for the query to save its results
            into
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.AddEmailOutput(System.String)">
            <summary>
            Add an email output target for the query results
            </summary>
            <param name="emailAddress">
            The address to which to send the query results
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.AddWebhookOutput(System.Uri)">
            <summary>
            Add a webhook output target for the query results
            </summary>
            <param name="webhookAddress">
            The URI of the web hook to which to post results
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.AddEventGridOutput(System.String,System.String,System.Uri)">
            <summary>
            Send the output of a query to Event Grid for distribution 
            </summary>
            <param name="eventType">
            The event type to use for the event
            </param>
            <param name="subject">
            The subject to use to route the event with
            </param>
            <param name="eventGridTopicEndpoint">
            The end point to send the event grid message out to
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.Delete">
            <summary>
            Delete the query backing event stream
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.#ctor(EventSourcingOnAzureFunctions.Common.Binding.QueryAttribute)">
            <summary>
            Create a new query instance from the parameter attribute
            </summary>
            <param name="attribute">
            The attribute to use to new up the query instance
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.Query.MakeDomainQueryName(System.String)">
            <summary>
            Make a "queries" domain for the given top level domain
            </summary>
            <param name="domainName">
            The top level (business) domain
            </param>
            <remarks>
            This allows different domains' query names to be unique even if
            the base query names are not
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Classifications.Completed">
            <summary>
            A classification to denote that a query execution has completed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.OutputLocationSet">
            <summary>
            A location to which the query results should be sent has been added to 
            this query
            </summary>
            <remarks>
            It may be possible to add these in-flight as well
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.OutputLocationSet.Location">
            <summary>
            The target to return the results to 
            </summary>
            <remarks>
            This can be a URI or other depending on the location type
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.OutputLocationSet.TargetType">
            <summary>
            What type of output this is
            </summary>
            <remarks>
            This could be e.g. a storage type, a webhook, an eventgrid 
            end point etc.
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.QueryProcessingRequested">
            <summary>
            The query has been set up ready to run and now the actual processing
            is requested
            </summary>
            <remarks>
            This may be subscribed to by the query handlers 
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.QueryProcessingRequested.AffinityPreference">
            <summary>
            If there is a preference for a region or instance to process this 
            query it can be set in this property
            </summary>
            <remarks>
            In most cases this is not needed
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Completed">
            <summary>
            A multi-step (event stream backed) query has completed
            </summary>
            <remarks>
            Once a query is tagged as completed it cannot be reopened so this 
            should be the last event in the event stream
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Completed.DateCompleted">
            <summary>
            The date/time the query was completed by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Completed.Notes">
            <summary>
            Commentary on the query that has completed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Created">
            <summary>
            A new query instance was created
            </summary>
            <remarks>
            This provides additional information above and beyond what is available in the query event 
            stream created notification
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Created.DateLogged">
            <summary>
            The date/time the new query was logged by the system
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Created.ExternalSystemUniqueIdentifier">
            <summary>
            If the system that initiated this query has its own way of identifying command instances
            this will be recorded here
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Created.AuthorisationToken">
            <summary>
            For queries that rely on authorisation this is the token passed in to test
            for the authorisation process
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Events.Created.ExternalOrchestrationIdentifier">
            <summary>
            If the system that initiated this query has its own orchestration process (for example with
            durable functions) this uniquely identifies that orchestration instance
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Functions.QueryHandlerFunctions">
            <summary>
            Functions to interact with query instances 
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Functions.QueryHandlerFunctions.GetQueryState(System.Net.Http.HttpRequestMessage,System.String,System.String,System.String)">
            <summary>
            Get the state of the specified query instance
            </summary>
            <param name="req">
            The HTTP request that triggered this function
            </param>
            <param name="domainName">
            The domain in which this query instance was run
            </param>
            <param name="queryName">
            The name of the type of query that was run
            </param>
            <param name="queryIdentifier">
            The specific instance of the command that was run
            </param>
            <returns>
            A record containing the state of the command as at the point the query was executed
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Functions.QueryHandlerFunctions.CompareQueries(System.Net.Http.HttpRequestMessage,System.String,System.String,System.String,System.String)">
            <summary>
            Compare two queries and return the set of differences between them
            </summary>
            <param name="req">
            The HTTP request that triggered this function
            </param>
            <param name="domainName">
            The domain in which these query instances were run
            </param>
            <param name="queryName">
            The name of the type of query that was run
            </param>
            <param name="sourceQueryIdentifier">
            The unique identifier of the first query instance we are comparing
            </param>
            <param name="targetQueryIdentifier">
            The unique identifier of the first query instance we are comparing against
            </param>
            <remarks>
            This is useful to run "what has changed" analysis between two instances of the 
            query run at different times.
            </remarks>
            <returns>
            </returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Projections.OutputLocations">
            <summary>
            The set of all the output locations for a query results to be sent to
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.CQRS.QueryHandler.Projections.OutputLocations.RequestedOutputs">
            <summary>
            The locations the output of this query should be setnt
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.ClassifierHandler.Projections.OutstandingClassifications">
            <summary>
            The projection to get the list of all classification requests outstanding for a
            given command or query
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.ClassifierHandler.Projections.OutstandingClassifications.ClassificationsToBeProcessed">
            <summary>
            The set of classifiers that still need to be processed
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions">
            <summary>
            Configuration options for the event sourcing on azure extension/library.
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.RaiseEntityCreationNotification">
            <summary>
            Should this function app raise notifications when a new entity instance
            is created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.RaiseEntityDeletionNotification">
            <summary>
            Should this function app raise notifications when a new entity instance
            is deleted
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.RaiseEventNotification">
            <summary>
            Should this function app raise notifications when an event is persisted
            to an event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.RaiseProjectionCompletedNotification">
            <summary>
            Should this function app raise notifications when a projection completes
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.RaiseClassificationCompletedNotification">
            <summary>
            Should this function app raise notifications when a classification completes
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridHubName">
            <summary>
            The name of the eventgrid hug to send notifications via
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridKeyValue">
            <summary>
            The SAS key to use when communicating with event grid
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridTopicEndpoint">
            <summary>
            The event grid topic endpoint used when communication notifications via event grid
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridKeySettingName">
            <summary>
            The name of the app setting containing the key used for authenticating with the Azure Event Grid custom topic at <see cref="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridTopicEndpoint"/>.
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridPublishRetryCount">
            <summary>
            Gets or sets the Event Grid publish request retry count.
            </summary>
            <value>The number of retry attempts.
            The default is 10
            </value>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.EventGridPublishRetryInterval">
            <summary>
            Gets orsets the Event Grid publish request retry interval.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the retry interval. 
            The default value is 5 minutes.</value>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcingOnAzureOptions.#ctor">
            <summary>
            Empty constructor for serialisation
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification">
            <summary>
            A classifier is a simplified form of a projection that classifies entities as being
            in our out of a given group
            </summary>
            <remarks>
            This can be used to implement functionality broardly analoguous to a WHERE clause in SQL
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification.DomainName">
            <summary>
            The domain in which the event stream the classifier will run over is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification.EntityTypeName">
            <summary>
            The type of entity over which this classifier will run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity for which the classifier will run
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification._classifierTypeName">
            <summary>
            The specific classifier type to execute
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification.SetParameter(System.String,System.Object)">
            <summary>
            Set a parameter to be used when running the classifier
            </summary>
            <param name="parameterName">
            The name of the parameter - this must be unique per classifier
            </param>
            <param name="parameterValue">
            The value to use for that named parameter for this run
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification.GetAllInstanceKeys(System.Nullable{System.DateTime})" -->
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Classification.#ctor(EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings,EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationSnapshotReader,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationSnapshotWriter)">
            <summary>
            Create the projection from the attribute linked to the function parameter
            </summary>
            <param name="attribute">
            The attribute describing which projection to run
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.ClassificationResults">
            <summary>
            The different states that can result from a 
            classifier step process
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.ClassificationResults.Unchanged">
            <summary>
            The state remains as whatever it was before the classification
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.ClassificationResults.Include">
            <summary>
            The entity instance is marked as being included in the group defined by the classification
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.ClassificationResults.Exclude">
            <summary>
            The entity instance is marked as being excluded in the group defined by the classification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.Result">
            <summary>
            The result of the classification 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.AsOfSequence">
            <summary>
            The last sequence number read to get this classification result
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.WasEverIncluded">
            <summary>
            Was this entity ever included according to this classifier
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse.WasEverExcluded">
            <summary>
            Was this entity ever excluded according to this classifier
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationBase.CurrentSequenceNumber">
            <summary>
            The current sequence number of the last event processed by this projection
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationBase.SetParameter(System.String,System.Object)">
            <summary>
            Allow parameters to be passed to the classification class
            </summary>
            <param name="parameterName">
            The unique name of the parameter
            </param>
            <param name="parameterValue">
            The value to use for that parameter
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMaps.LoadFromConfig(System.String)">
            <summary>
            Load the projection maps as stored in any configuration files
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMaps.LoadByReflection">
            <summary>
            Load the projection maps by reading the attributes of any IProjection based classes in the existing
            application
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMaps.CreateClassificationClass(System.String)">
            <summary>
            Create the .NET class for a particular classification type from its name
            </summary>
            <param name="classificationName">
            The "business" name of the classification to map to a .NET class
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMap">
            <summary>
            Mapping between a classification name and the class that implements it
            </summary>
            <remarks>
            Classification names can be domain qualified {domain}.{entity type}.{projection name} if
            needed for uniqueness
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMap.ClassificationName">
            <summary>
            The unique classification name as it is known to the application
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMap.ClassificationImplementationClassName">
            <summary>
            The name of the CLR class that implements that projection
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationMap.#ctor">
            <summary>
            Parameter-less constructor for serialisation
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationNameAttribute">
            <summary>
            Attribute to allow a classification class to be tagged with the classification name
            </summary>
            <remarks>
            This allows the classification name to be independent of the language used to read/write it for notifications
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationNameAttribute.Name">
            <summary>
            The business meaningful name of the event held in this class
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.DependencyInjection.LoggingServiceCollectionExtensions">
            <summary>
            Extensions for dependency injection of the [EventMaps]
            </summary>
            <summary>
            Extensions for dependency injection of the [EventStreamSettings]
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.DependencyInjection.NotificationServiceCollectionExtensions">
            <summary>
            Extensions for registering a notification dispatcher for dependnecy injection
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMaps">
            <summary>
            Settings in the [EventStreamSettings] section of the JSON settings file(s)
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMaps.LoadFromConfig(System.String)">
            <summary>
            Load the event maps as stored in any configuration files
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMaps.LoadByReflection">
            <summary>
            Load the event maps by reading the attributes of any IEvent based classes in the existing
            application
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMaps.CreateDefaultEventMaps">
            <summary>
            Create an event map that is the default for this application
            </summary>
            <remarks>
            This uses both the configuration and reflection to build the maps - if you need faster
            spin-up you should create a hard-coded map and use dependency injection to load it
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMap">
            <summary>
            A single mapping between an event name and the CLR class used to encapsulate it
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMap.EventName">
            <summary>
            The unique event name as it is known to the application
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMap.EventImplementationClassName">
            <summary>
            The name of the CLR class that implements that event
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventMapsConfigurationSection">
            <summary>
            Class for binding to the [EventMaps] 
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventNameAttribute">
            <summary>
            Attribute to allow an event class to be tagged with the event name
            </summary>
            <remarks>
            This allows the event name to be independent of the language used to read/write it for shared event streams
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventNameAttribute.Name">
            <summary>
            The business meaningful name of the event held in this class
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream">
            <summary>
            Top level access to the event stream for an entity
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.DomainName">
            <summary>
            The domain in which this event stream is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.Exists">
            <summary>
            Does the event stream identified by the domain/type/instance exist yet
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.AppendEvent(System.Object,System.Nullable{System.Int32},EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint)">
            <summary>
            Append an event onto the event stream 
            </summary>
            <param name="eventToAppend">
            The event we want to write to the event stream
            </param>
            <param name="expectedTopSequence">
            The sequence number we expect to be the last in the event stream - if events have been added since this then a 
            concurrency error is thrown
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.Context">
            <summary>
            The writer context which is used to "wrap" events written so we know who wrote them (and why)
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.SetContext(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            Set the writer context which is used to "wrap" events written so we know who wrote them (and why)
            </summary>
            <param name="context">
            The context to use when writing events
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStream.DeleteStream">
            <summary>
            Delete this event stream instance
            </summary>
            <remarks>
            This is included for short-lived entities (like commands, queries, sagas) but is 
            not a good idea for real business entities.
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSettings">
            <summary>
            Settings in the [EventStreamSettings] section of the JSON settings file(s)
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSettings.DefaultEventStreamSetting(System.String)">
            <summary>
            The default settings to use if no settings are specified in the application configuration
            </summary>
            <param name="domainQualifiedEntityTypeName">
            The name of the type of entity that this event stream setting is for
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSettings.CreateWriterForEventStream(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Create an instance of the appropriate event stream writer to use for the given event stream
            </summary>
            <param name="attribute">
            The attribute defining the Domain,Entity Type and Instance Key of the event stream
            </param>
            <remarks>
            This is to allow different event streams to be held in different backing technologies
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSettings.CreateProjectionProcessorForEventStream(EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute)">
            <summary>
            Create a projection processor to run over the given event stream's backing store
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSettings.CreateClassificationProcessorForEventStream(EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute)">
            <summary>
            Create a classification processor to run over the given event stream's backing store
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSetting">
            <summary>
            The settings to use for a given event stream
            </summary>
            <remarks>
            This is used to set where/how the underlying data of the event stream are stored.
            If not set by a configuration setting the default is used
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSetting.DomainQualifiedEntityTypeName">
            <summary>
            The name of the type of entity that this event stream setting is for
            </summary>
            <remarks>
            This is in the form of a dot-separated name
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSetting.Storage">
            <summary>
            The type of storage implementation this event stream is based on
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSetting.ConnectionStringName">
            <summary>
            The connection string to use to access the underlying storage mechanism
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSetting.MakeDomainQualifiedEntityName(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.Boolean,System.Boolean)">
            <summary>
            Get the domain qualified entity name for an event stream
            </summary>
            <param name="eventStreamIdentity">
            The unique identity of the event stream
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.EventStreamSetting.MakeEnvironmentStringKey(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.Boolean,System.Boolean)">
            <summary>
            Get the environment string key that can be used to set the event stream settings for the given domain and entity type
            </summary>
            <param name="eventStreamIdentity">
            The identity of the domain and entity type that has its history stored in the given event stream
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Exceptions.EventStreamExceptionBase.DomainName">
            <summary>
            The domain in which this event stream exception occured
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Exceptions.EventStreamExceptionBase.EntityTypeName">
            <summary>
            The type of entity for which this event stream error pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Exceptions.EventStreamExceptionBase.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Exceptions.EventStreamReadException">
            <summary>
            An exception that has occured while reading 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AppendResult.NewEventStreamCreated">
            <summary>
            Did this write operation result in the creation of a new event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AppendResult.SequenceNumber">
            <summary>
            The sequence number of the event written
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.EventTypeName">
            <summary>
            The name of the type of event this is
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.VersionNumber">
            <summary>
            The version number of the event schema 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.SequenceNumber">
            <summary>
            The incremental sequence number of this event in the stream/history in which it is written
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.EventInstanceAsJson">
            <summary>
            The inner event detail converted into a JSON class
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.Who">
            <summary>
            Who caused this event to be written 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.Source">
            <summary>
            Where did the command to write this event come from
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.Commentary">
            <summary>
            Additional context commentary to add to the event wrapper
            </summary>
            <remarks>
            This is not for business meaningful data but rather for debugging or logging purposes
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.CorrelationIdentifier">
            <summary>
            Correlation identifier used to find events that were written together
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.CausationIdentifier">
            <summary>
            Causation identifier used to find events that were written by the same thing (command or transaction)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.SchemaName">
            <summary>
            The name or URN of the schema used to write this event
            </summary>
            <remarks>
            If this is empty then the event type is used instead
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.WriteTime">
            <summary>
            The date/time the event was written to the event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.EventWrittenDateTime">
            <summary>
            The date the event was written
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.EventInstance">
            <summary>
            The evnt instance as an ordinary object
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.DefaultJSonSerialiserSettings">
            <summary>
            The common serialiser settings for readinr or writing the wrapped event
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.Create(System.String,System.Int32,System.Int32,System.Nullable{System.DateTime},EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            Create a wrapper for this JSON event
            </summary>
            <param name="eventTypeName">
            The type of event in this wrapper
            </param>
            <param name="sequenceNumber">
            The ordinal sequence of the event in the event stream
            </param>
            <param name="VersionNumber">
            The version number of the event schema
            </param>
            <param name="writeTime">
            The date/time the event was written to the event stream
            </param>
            <param name="eventInstance">
            Th eunderlying data for this event instance
            </param>
            <param name="context">
            Extra context information to be written in with the event 
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobBlockJsonWrappedEvent.FromBinaryStream(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="rawStream">
            The stream of data to read events from
            </param>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.ORPHANS_FOLDER">
            <summary>
            The default folder where uncateggorised entities are stored
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.EVENTSTREAM_FOLDER">
            <summary>
            The default subfolder where the event streams are stored
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.SNAPSHOTS_FOLDER">
            <summary>
            The default subfolder where projection snapshots are stored
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.BlobContainer">
            <summary>
            The container where the blob for this specific event stream can be found
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.GetRecordCount">
            <summary>
            Get the number of records in this event stream
            </summary>
            <returns>
            The number of events appended to this event stream
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.GetSequenceNumber">
            <summary>
            Gets the current top sequence number of the event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.Refresh">
            <summary>
            Make sure the blob info attributes are up to date 
            </summary>
            <remarks>
            This is similar in concept to FileSystemInfo.Refresh
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamBase.MakeValidStorageFolderName(System.String)">
            <summary>
            Turn a name into a valid folder name for azure blob storage
            </summary>
            <param name="rawName">
            The name of the thing we want to turn into a blob storage folder name
            </param>
            <returns>
            A folder name that can be used to locate this object type's event streams
            </returns>
            <remarks>
            Container names must start With a letter Or number, And can contain only letters, numbers, And the dash (-) character.
            Every dash (-) character must be immediately preceded And followed by a letter Or number; consecutive dashes are Not permitted in container names.
            All letters in a container name must be lowercase.
            Container names must be from 3 through 63 characters long.
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamReader.Create(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String)">
            <summary>
            Creates an azure blob storage based event stream reader for the given aggregate
            </summary>
            <param name="identity">
            The unique identifier of the event stream to read
            </param>
            <param name="connectionStringName">
            Th ename of the connection string to use to do the reading
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamReader.Exists">
            <summary>
            Does an event stream already exist for this Domain/Type/Instance
            </summary>
            <remarks>
            This can be used for e.g. checking it exists as part of a validation
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamReader.GetAllInstanceKeys(System.Nullable{System.DateTime})" -->
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamWriter.AppendEvent(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent,System.Int32,System.Int32,EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint)">
            <summary>
            Append the event to the end of the event stream
            </summary>
            <param name="eventInstance">
            The event to append to the end of the event stream
            </param>
            <param name="expectedTopSequenceNumber">
            if this is set to > 0 and the event stream is further on then a consistency issue has arisen and the 
            event should not be written but rather throw an error
            </param>
            <param name="eventVersionNumber">
            The version number to add to the event wrapper
            </param>
            <param name="streamConstraint">
            An additional constrain that must be satisfied by the event stream in order to persist the event
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamWriter.IncrementSequence(System.String)">
            <summary>
            Increment the sequence number of the event stream
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamWriter.Exists">
            <summary>
            Does an event stream already exist for this Domain/Type/Instance
            </summary>
            <remarks>
            This can be used for e.g. checking it exists as part of a validation
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AppendBlob.BlobEventStreamWriter.DeleteStream">
            <summary>
            Delete the blob file containing the event stream
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AzureStorageEventStreamBase">
            <summary>
             Common functionality that both reader and writer use to access any event store based on Azure storage
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AzureStorageEventStreamBase.DomainName">
            <summary>
            The domain name in which this event stream is residing
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AzureStorageEventStreamBase.DefaultConnectionStringName">
            <summary>
            The default connection string to fall back on if nothing else is found
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.AzureStorageEventStreamBase.StorageConnectionStringSettingName">
            <summary>
            The name of the default connection string to use for the domain
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Blob.BlobSnapshotBase.MakeSnapshotFilename(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot)">
            <summary>
            Turn the given snapshot definition into an unique filename
            </summary>
            <param name="snapshot">
            The snapshot definition to be saved or read
            </param>
            <remarks>
            The filename is the sequence number with the rest of the snapshot definition
            going into the folder path
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Blob.BlobSnapshotBase.MakeSnapshotFolder(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot)">
            <summary>
            Make a folder path in which a snapshot for a projection can be saved
            </summary>
            <param name="snapshot"></param>
            <returns></returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Blob.BlobProjectionSnapshotReader">
            <summary>
            Class to read a projection snapshot from an Azure storage blob
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Blob.BlobProjectionSnapshotReader.LoadProjection``1(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot)">
            <summary>
            Loads the snapshot record closes to the requested as-of sequence number 
            from which to start running a projection
            </summary>
            <typeparam name="TProjection">
            The projection into which to load the initial snapshot
            </typeparam>
            <param name="snapshot">
            The snapshot definition from which to load
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Blob.BlobProjectionSnapshotWriter">
            <summary>
            Writer to save projection snapshots in an Azure storage blob
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.DomainName">
            <summary>
            The domain in which this event stream is set
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.AsOfSequence">
            <summary>
            The event sequence number as of which the snapshot was taken
            </summary>
            <remarks>
            This is stored in the record row key
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.WasEverIncluded">
            <summary>
            Was this entity ever included in this classification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.WasEverExcluded">
            <summary>
            Was this entity ever excluded from this classification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.CurrentClassification">
            <summary>
            The classification state as at the point the snapshot is taken
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationRecord.ETag">
            <summary>
            The special concurrency protection tag used to make sure no update has occured since the last read
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotBase">
            <summary>
            Base class for functionality to persist classification snapshots
            to an Azure table
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotBase.DomainName">
            <summary>
            The domain in which this event stream is set
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotBase.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotBase.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotBase.StorageConnectionStringSettingName">
            <summary>
            The name of the default connection string to use for the domain
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotReader">
            <summary>
            A snapshot reader to load classification snapshots
            from an Azure table storage
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableClassificationSnapshotWriter">
            <summary>
            A snapshot writer to persist a classification snapshot
            into an Azure table storage
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent">
            <summary>
            A class to wrap an event in the context read from an Azure table
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.VersionNumber">
            <summary>
            The version number of the event schema 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.SequenceNumber">
            <summary>
            The sequence number of this event in its event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.EventInstance">
            <summary>
            The specific event data
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.Who">
            <summary>
            The user that was the source of the event
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.Source">
            <summary>
            The application that was the source of the event
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.Commentary">
            <summary>
            Additional notes to go along with the event instance
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.CorrelationIdentifier">
            <summary>
            A unique identifier to show events that are correlated together
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.CausationIdentifier">
            <summary>
            The unique identifier of whatever caused this event to occur
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.SchemaName">
            <summary>
            The name or URN of the schema used to write this event
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableContextWrappedEvent.EventWrittenDateTime">
            <summary>
            The date and time the event was written
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityIndexCardRecord">
            <summary>
            An index-card to allow rapid lookup of the entities in any domain/entity type
            </summary>
            <remarks>
            This is only used to speed up "all entities" queries as a cross-partition query is
            slower
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityIndexCardRecord.DomainName">
            <summary>
            The domain in which this event stream is set
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityIndexCardRecord.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityIndexCardRecord.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityIndexCardRecord.Timestamp">
            <summary>
            The time the record was last updated
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityIndexCardRecord.ETag">
            <summary>
            The special concurrency protection tag used to make sure no update has occured since the last read
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord">
            <summary>
            The lowest record in an event stream that holds the stream meta data
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.DomainName">
            <summary>
            The domain in which this event stream is set
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.LastSequence">
            <summary>
            The last sequence number for this event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.Context">
            <summary>
            Additional context information / commentary for this event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.Deleting">
            <summary>
            This flag is set to indicate that an event stream is being deleted
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.ETag">
            <summary>
            The special concurrency protection tag used to make sure no update has occured since the last read
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEntityKeyRecord.#ctor">
            <summary>
            Parameter-less constructor for serialisation
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.DomainName">
            <summary>
            The domain in which this event stream is set
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.EntityTypeName">
            <summary>
            The type of entity for which this event stream pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream pertains
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.StreamAlreadyExists">
            <summary>
            Does a stream already exist for this event stream identity
            </summary>
            <remarks>
            We use the existence of the stream footer record as proof of stream existence
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.StorageConnectionStringSettingName">
            <summary>
            The name of the default connection string to use for the domain
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.MakeValidStorageTableName(System.String)">
            <summary>
            Make a valid Azure table name for the raw name of the entity type passed in
            </summary>
            <param name="rawName">
            The raw name of the entity type passed in that may be an illegal table name
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.SequenceNumberAsString(System.Int32)">
            <summary>
            Return the sequence number as a string for storing in the RowKey field of an Azure table
            </summary>
            <param name="startingSequence">
            The given sequence number
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.ProjectionQuery(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.Int32,System.Int32)">
            <summary>
            Generate a query to get the event rows for an individual event stream between two sequence numbers (inclusive)
            </summary>
            <param name="identity">
            The unique identifier of the event stream to read
            </param>
            <param name="startingSequence">
            The starting sequence to read from
            </param>
            <param name="upToSequence">
            (Optional) The end sequence to read up to (inclusive)
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.InstanceQuery(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Generate a query definition for the given entity instance
            </summary>
            <param name="identity">
            The domain/entity type/unique identifier insatnec of the event stream to get
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.IsPropertyEmpty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Is the property empty so not to be persisted to the backing store
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamBase.IsContextProperty(System.String)">
            <summary>
            Returns true if a property belongs to the event context rather thab the event data
            </summary>
            <param name="propertyName">
            The name of the property from the table
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamReader.CreateEventClass(System.String)">
            <summary>
            Create the event class to hold the event properties from the event name
            </summary>
            <param name="eventName">
            The event name from the wrapped event record
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamReader.CreateQuery(System.Int32)">
            <summary>
            Create a query to get the events greater than or equal to the given starting point
            </summary>
            <param name="StartingSequenceNumber">
            The 1-based sequence number to start from
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamReader.GetKeysQuery">
            <summary>
            Get all the "key" rows in the table
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamReader.GetDefaultRequestOptions">
            <summary>
            Get the standard request options to use when retrieving the event stream data from a table
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamReader.DefaultSharedAccessAccountPolicy">
            <summary>
            Policy to allow read-access to the tables
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamReader.Create(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String)">
            <summary>
            Creates an azure table storage based event stream reader for the given aggregate
            </summary>
            <param name="identity">
            The unique identifier of the event stream to read
            </param>
            <param name="connectionStringName">
            The name of the connection string to use to do the reading from the table
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.AppendEvent(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent,System.Int32,System.Int32,EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint)">
            <summary>
            Save an event onto the end of the event stream stored in Azure table
            </summary>
            <param name="eventInstance">
            The specific event to append to the end of the store
            </param>
            <param name="expectedTopSequenceNumber">
            If this is set and the sequence number of the event stream is higher then the event is 
            not written
            </param>
            <param name="eventVersionNumber">
            The version number of the event being written
            </param>
            <param name="streamConstraint">
            Additional constraint that must be true if the event is to be appended
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.IncrementSequenceNumber">
            <summary>
            Increment the sequence number for this event stream and return the new number
            </summary>
            <remarks>
            This is done before the event itself is written so that a partial failure leaves a gap in the event stream which is
            less harmful than an overwritten event record
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.DeleteStream">
            <summary>
            Delete all the records in the table linked to this event stream
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.DeleteRowsQuery">
            <summary>
            Create a query to get the events 
            for an instance key to delete them
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.DefaultSharedAccessAccountPolicy">
            <summary>
            Policy to allow read/writer access to the storage account the table(s) are in
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.#ctor(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String)">
            <summary>
            Constructor to create a table backed writer for a given event stream
            </summary>
            <param name="identity">
            The identity of the entity for which to create an event stream writer
            </param>
            <param name="connectionStringName">
            (Optional) The name of the connection string to use to access the azure storage
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.AzureStorage.Table.TableEventStreamWriter.WriteIndex">
            <summary>
            Write (or overwrite) an INDEX-CARD row for this entity
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.ClassificationProcessor.Exists">
            <summary>
            Does the underlying event stream over which this classification should run exist yet?
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.ClassificationProcessor.Parameters">
            <summary>
            The set of name-value parameters set fot the classification
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.ClassificationProcessor.ParameterExists(System.String)">
            <summary>
            Does the named parameter exist
            </summary>
            <param name="parameterName">
            The name of the parameter to find
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventInstance.EventTypeName">
            <summary>
            The name of this type of event
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventInstance.EventPayload">
            <summary>
            The business data payload for the event
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase">
            <summary>
            Base functionality for all event streams, regardless of their backing storage mechanism
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint">
            <summary>
            Constraints to control writing to the underlying event stream
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint.Loose">
            <summary>
            It doesn't matter if the event stream already exists or not
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint.MustExist">
            <summary>
            This command may only proceed if the event stream already exists
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint.MustBeNew">
            <summary>
            This command may only succeed if the event stream does not already exist
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.ProjectionProcessor.Exists">
            <summary>
            Does the underlying event stream over which this projection should run exist yet?
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.WriteContext">
            <summary>
            A write context to wrap around an event in order to give additional non-business context for the event 
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IAppendResult">
            <summary>
            The result of an append event operation
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IAppendResult.NewEventStreamCreated">
            <summary>
            Did this event append result in a new event stream being created
            </summary>
            <remarks>
            This is needed in order to raise the "New Entity" notification
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IAppendResult.SequenceNumber">
            <summary>
            The sequence number of the event that was just appended
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification">
            <summary>
            Marker interface to denote anything as being a classification over the given event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.SupportsSnapshots">
            <summary>
            Does this classification use snapshots to save the latest state or does it need to run 
            the entire classification over the full stream every time?
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.CurrentSequenceNumber">
            <summary>
            The current sequence number of the last event the classification ran to
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.MarkEventHandled(System.Int32)">
            <summary>
            Called when a classification processor has handled an event 
            </summary>
            <param name="handledEventSequenceNumber">
            The sequence number of the event that has been competed - this allows the classification to keep 
            track of where in the event stream it has got to
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.CurrentAsOfDate">
            <summary>
            The current as-of date for this classification
            </summary>
            <remarks>
            This is only updated where an event is processed that has an as-of date field as part of its data properties
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.HandlesEventType(System.String)">
            <summary>
            Does the classification use the data for the given event type
            </summary>
            <param name="eventTypeName">
            The full name of the event type containing the data that may or may not be handled by 
            the classification
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.HandleEvent(System.String,System.Object)">
            <summary>
            Perform whatever processing is required to classify the specific event
            </summary>
            <param name="eventTypeName">
            The full name of the event type containing the data for the event
            </param>
            <param name="eventToHandle">
            The specific event to handle and perform whatever processing is required
            </param>
            <returns>
            How the entity should be classified after processing this event
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification.OnEventRead(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            An event was read by the underlying event reader (whether it is handled or not)
            </summary>
            <param name="sequenceNumber">
            The sequence number of the event read
            </param>
            <param name="asOfDate">
            If the event has an "effective date" this is passed in here
            </param>
            <remarks>
            This is used for logging or debugging
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationMaps">
            <summary>
            Interface for any class that can map a classification name to its implementation type
            </summary>
            <remarks>
            This can be used with dependency injection to inject a hard-coded map for faster
            application startup, or any custom mapping needed for sharing projections
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationMaps.CreateClassificationClass(System.String)">
            <summary>
            Create the .NET class for a particular classification type from its name
            </summary>
            <param name="classificationName">
            The "business" name of the classification to map to a .NET class
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationProcessor.Exists">
            <summary>
            Does the event stream over which this projection is slated to run exist
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationProcessor.SetParameter(System.String,System.Object)">
            <summary>
            Set a named parameter to be used when performing the 
            classification
            </summary>
            <param name="parameterName">
            The name of the parameter - this must be unique within the classification
            </param>
            <param name="parameterValue">
            The value to assign to the named parameter
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationProcessor.Parameters">
            <summary>
            Get the name-value set of patameters for this classifier
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationProcessor.Classify``1(System.Nullable{System.DateTime})">
            <summary>
            Run the given classification over the underlying event stream
            </summary>
            <typeparam name="TClassification">
            The type of classification to run
            </typeparam>
            <param name="asOfDate">
            If set, only run the classification up until this date/time
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationProcessor.Classify(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassification,System.Nullable{System.DateTime})" -->
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationProcessor.GetAllInstanceKeys(System.Nullable{System.DateTime})" -->
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationSnapshotReader">
            <summary>
            Reader to load snapshots of a classification
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationSnapshotReader.LoadClassification``1(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot)">
            <summary>
            Read the snapshot of the given classification type closest to the 
            requested snapshot location
            </summary>
            <typeparam name="TClassification">
            The specific type of classification to load - this is used to locate
            the snapshot to read
            </typeparam>
            <param name="snapshot">
            The entity instance and sequence number to get the snapshot from
            (If no sequence number is specified, get the latest snapshot)
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationSnapshotWriter">
            <summary>
            A writer to save a classification snapshot so that the 
            classification processor can start form the last event 
            covered by the snapshot
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassificationSnapshotWriter.WriteSnapshot(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot,EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse)">
            <summary>
            Write a snapshot from a classification
            </summary>
            <param name="snapshot">
            The identification of the stream and sequence of the snapshot
            </param>
            <param name="state">
            The classification state as at that point
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IClassifyEventType`1.ClassifyEventInstance(`0)">
            <summary>
            Classify the given instance of this event type
            </summary>
            <param name="eventInstance">
            The specific instance of this event type with its data properties set
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent">
            <summary>
            The additional data required for every event 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent.EventTypeName">
            <summary>
            The readable type of this event
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent.EventPayload">
            <summary>
            The underlying business data of the object
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventContext">
            <summary>
            Event and its context information provided when it was written
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventContext.VersionNumber">
            <summary>
            The version number of the event schema 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventContext.SequenceNumber">
            <summary>
            The incremental sequence number of this event in the stream/history in which it is written
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventContext.EventInstance">
            <summary>
            The specific event in this context
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventContext.EventWrittenDateTime">
            <summary>
            The date and time the event was written
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventMaps">
            <summary>
            Interface for any class that can map an event name to its implementation type
            </summary>
            <remarks>
            This can be used with dependency injection to inject a hard-coded map for faster
            application startup, or any custom mapping needed for sharing event streams
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventMaps.CreateEventClass(System.String)">
            <summary>
            Create the .NET class for a particular event type from its name
            </summary>
            <param name="eventName">
            The "business" name of the event to encapsulate in a .NET class
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity">
            <summary>
            An interface that can be used to uniquely identify an event stream instance
            </summary>
            <remarks>
            The combination of DomainName.EntityTypeName.InstanceKey will uniquely identify the  entity instance
            e.g. HumanResources.Empolyee.Duncan_Jones could represent my records in a company HR system
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity.DomainName">
            <summary>
            The domain to which the entity (and its event stream) belong
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity.EntityTypeName">
            <summary>
            The type/classification of entity to which the entity (and its event stream) belong
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity.InstanceKey">
            <summary>
            The unique identifier of the aggregate instance to which the event stream pertains
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamReader">
            <summary>
            Definition for any implementation that can read events from an event stream
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamReader.Exists">
            <summary>
            Does the underlying event stream for this reader exists
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamReader.GetAllEvents">
            <summary>
            Get the entire event stream for a given event stream identity
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamReader.GetEvents(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Gets the event stream for a given event stream identity from a given starting place
            </summary>
            <param name="StartingSequenceNumber">
            The sequence number from which to get the events - if zero then all the events will be returned
            </param>
            <param name="effectiveDateTime">
            </param>
            <returns>
            This is used in scenario where we are starting from a given snapshot version
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamReader.GetEventsWithContext(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Gets the event stream with the additional context of the events for a given event stream identity from a given starting place
            </summary>
            <param name="StartingSequenceNumber">
            The sequence number from which to get the events - if zero then all the evenst will be returned
            </param>
            <param name="effectiveDateTime">
            </param>
            <returns>
            This is typically only used for audit trails as all business functionality should depend on the event data alone
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamReader.GetAllInstanceKeys(System.Nullable{System.DateTime})" -->
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings.LoadFromConfig(System.String)">
            <summary>
            Load the settings from the application configuration
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings.GetBackingImplementationType(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Returns the name of the type of backing store used to store this event stream instance
            </summary>
            <param name="attribute">
            The attribute that defines the event stream instance we are using
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings.GetConnectionStringName(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Returns the name of the connection string to use to connect to this event stream instance
            </summary>
            <param name="attribute">
            The attribute that defines the event stream instance we are using
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings.CreateWriterForEventStream(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Create a writer for the given event stream identity
            </summary>
            <param name="attribute">
            The event stream to write to
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings.CreateProjectionProcessorForEventStream(EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute)">
            <summary>
            Create a projection processor for the given event stream and projection
            </summary>
            <param name="attribute">
            The unique identity of the event stream and the projection to run over it
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings.CreateClassificationProcessorForEventStream(EventSourcingOnAzureFunctions.Common.Binding.ClassificationAttribute)">
            <summary>
            Create a classification processor for the given event stream and classifier
            </summary>
            <param name="attribute">
            The unique identity of the event stream and the projection to run over it
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamWriter.AppendEvent(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEvent,System.Int32,System.Int32,EventSourcingOnAzureFunctions.Common.EventSourcing.Implementation.EventStreamBase.EventStreamExistenceConstraint)">
            <summary>
            Save an event onto the end of the event stream
            </summary>
            <param name="eventInstance">
            The specific event to append to the end of the store
            </param>
            <param name="expectedTopSequenceNumber">
            If this is set and the sequence number of the event stream is higher then the event is not written
            </param>
            <param name="eventVersionNumber">
            The version number of the event being written
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamWriter.SetContext(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            Set the context under which this event stream writer is writing events
            </summary>
            <param name="writerContext">
            The additional context information to add to the events when they are written
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamWriter.Exists">
            <summary>
            Returns true if the underlying event stream exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamWriter.DeleteStream">
            <summary>
            Delete the underlying event stream of this event stream identity
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamWriter.WriteIndex">
            <summary>
            Write an index card record to be used to be used rapidly to look up the
            full set of event streams of this type
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IHandleEventType`1">
            <summary>
            An interface to make type-safe projections which handle a particular event type
            </summary>
            <typeparam name="TEventType">
            The type of this event to handle
            </typeparam>
            <remarks>
            This can make it easier to code projections by passing on the specific event type onto the handler 
            coded specifically for it
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IHandleEventType`1.HandleEventInstance(`0)">
            <summary>
            Handle the given instance of this event type
            </summary>
            <param name="eventInstance">
            The specific instance of this event type with its data properties set
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IJsonSerialisedEvent">
            <summary>
            An event that is serialised to/from JSON in order to be persisted to an event stream
            </summary>
            <remarks>
            This adds an explicit property for the event class name to make it independent of how the 
            programming language chosen names its classes - you could choose to use a domain ubiquitous
            language event name for this
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IJsonSerialisedEvent.EventTypeName">
            <summary>
            The name of the type of event this is
            </summary>
            <remarks>
            This allows projections to skip-over this type of event if they do not need to process it
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IJsonSerialisedEvent.EventInstanceAsJson">
            <summary>
            The underlying event data as a JSON object
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection">
            <summary>
            Marker interface to denote anything as being a projection over the given event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.SupportsSnapshots">
            <summary>
            Does this projection use snapshots to save the latest state or does it need to rebuild the entire projection every time?
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.CurrentSequenceNumber">
            <summary>
            The current sequence number of the last event the projection ran to
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.MarkEventHandled(System.Int32)">
            <summary>
            Called when a projection processor has handled an event 
            </summary>
            <param name="handledEventSequenceNumber">
            The sequence number of the event that has been competed - this allows the projection to keep 
            track of where in the event stream it has got to
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.CurrentAsOfDate">
            <summary>
            The current as-of date for this projection
            </summary>
            <remarks>
            This is only updated where an event is processed that has an as-of date field as part of its data properties
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.HandlesEventType(System.String)">
            <summary>
            Does the projection handle the data for the given event type
            </summary>
            <param name="eventTypeName">
            The full name of the event type containing the data that may or may not be handled by the projection
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.HandleEvent(System.String,System.Object)">
            <summary>
            Perform whatever processing is required to handle the specific event
            </summary>
            <param name="eventTypeName">
            The full name of the event type containing the data for the event
            </param>
            <param name="eventToHandle">
            The specific event to handle and perform whatever processing is required
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjection.OnEventRead(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            An event was read by the underlying event reader (whether it is handled or not)
            </summary>
            <param name="sequenceNumber">
            The sequence number of the event read
            </param>
            <param name="asOfDate">
            If the event has an "effective date" this is passed in here
            </param>
            <remarks>
            This is used for logging or debugging
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionMaps">
            <summary>
            Interface for any class that can map a projection name to its implementation type
            </summary>
            <remarks>
            This can be used with dependency injection to inject a hard-coded map for faster
            application startup, or any custom mapping needed for sharing projections
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionMaps.CreateProjectionClass(System.String)">
            <summary>
            Create the .NET class for a particular projection type from its name
            </summary>
            <param name="projectionName">
            The "business" name of the projection to map to a .NET class
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionProcessor.Exists">
            <summary>
            Does the event stream over which this projection is slated to run exist
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionProcessor.Process``1(System.Nullable{System.DateTime})">
            <summary>
            Run the given projection over the underlying event stream
            </summary>
            <typeparam name="TProjection">
            The type of projection to run
            </typeparam>
            <param name="asOfDate">
            If set, only run the projection up until this date/time
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionProcessor.Process``1(``0,System.Nullable{System.DateTime})" -->
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionSnapshotReader">
            <summary>
            Reader to load snapshots of a projection
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionSnapshotReader.LoadProjection``1(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot)">
            <summary>
            Read the snapshot of the given projection type closest to the 
            requested snapshot location
            </summary>
            <typeparam name="TProjection">
            The specific type of projection to load
            </typeparam>
            <param name="snapshot">
            The entity instance and sequence number to get the snapshot from
            (If no sequence number is specified, get the latest snapshot)
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionSnapshotWriter">
            <summary>
            A writer to save a projection snapshot so that the 
            projection processor can start form the last event 
            covered by the snapshot
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionSnapshotWriter.WriteSnapshot``1(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot,``0)">
            <summary>
            Write a snapshot from a projection
            </summary>
            <param name="snapshot">
            The identification of the stream and sequence of the snapshot
            </param>
            <param name="state">
            The projection state as at that point
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionWithSnapshots">
            <summary>
            A projection which supports saving a state to, and reading a state from, a snapshot
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionWithSnapshots.FromSnapshot(System.Int32,System.Nullable{System.DateTime},System.Object)">
            <summary>
            Read the current state of a projection from a snapshot 
            </summary>
            <param name="sequenceNumber">
            The sequence number at which the snapshot was taken
            </param>
            <param name="asOfDate">
            The as-of date at which the snapshot was taken
            </param>
            <param name="snapshot">
            The raw data object of the state as at when the snapshot was taken
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionWithSnapshots.ToSnapshot">
            <summary>
            Turn the current state of this projection into a snapshot object to be saved
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot">
            <summary>
            Common functionality for all snapshots - of projections or of
            classifiers
            </summary>
            <remarks>
            This builds on the event stream identity which uniquely identifies
            the entity that was snapshotted
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot.CurrentSequenceNumber">
            <summary>
            The current sequence number of the last event that was read in 
            producing the state that is being persisted to this snapshot
            </summary>
            <remarks> 
            The snapshot can be used by taking this number + 1 as the start
            of the stream of events to be considered "new"
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext">
            <summary>
            Additional context information provided when an event is written
            </summary>
            <remarks>
            This is non-business information for logging, auditing etc.
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext.Who">
            <summary>
            Which user caused the event to be written
            </summary>
            <remarks>
            This can be empty in the case of timer or state triggered events
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext.Source">
            <summary>
            The source from whence this event originated
            </summary>
            <remarks>
            This could be an IP address or a process name or whatever makes sense
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext.Commentary">
            <summary>
            Any additional non-business comments attached to the event 
            </summary>
            <remarks>
            This could be used for audit purposes for example
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext.CorrelationIdentifier">
            <summary>
            An externally provided unique identifier to tie together events that are linked together
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext.CausationIdentifier">
            <summary>
            An externally provided unique identifier to tie together events comming from the same cause
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext.SchemaName">
            <summary>
            The name or URN of the schema used to write this event
            </summary>
            <remarks>
            If this is empty then the event type is used instead
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection">
            <summary>
            A projection is a piece of code that runs over the event stream for an entity in order to derive some state information about that entity.
            For each event in the stream it needs to decide (a) am I interested in this kind of event and if so (b) what do I do with it.
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.DomainName">
            <summary>
            The domain in which this event stream that we are running the projection over is located
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.EntityTypeName">
            <summary>
            The type of entity for which this event stream that we are running the projection over pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.InstanceKey">
            <summary>
            The specific uniquely identitified instance of the entity to which this event stream 
            that we are running the projection over pertains
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.ProjectionTypeName">
            <summary>
            The type of the projection we are going to run 
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.Process``1(System.Nullable{System.DateTime})">
            <summary>
            Process the projection and return the results
            </summary>
            <typeparam name="TProjection">
            The type of the projection to be executed
            </typeparam>
            <param name="asOfDate">
            The date up to which to run the projection. 
            If this is not specified then run to the end of the event stream.
            </param>
            <returns>
            A task which is used to execute the projection
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.Process``1(``0,System.Nullable{System.DateTime})">
            <summary>
            Process the projection and return the results
            </summary>
            <typeparam name="TProjection">
            The type of the projection to be executed
            </typeparam>
            <param name="projectionToRun">
            The instance of the projection to start processing from
            (This allows a projection to start from a given initial state)
            </param>
            <param name="asOfDate">
            The date up to which to run the projection. 
            If this is not specified then run to the end of the event stream.
            </param>
            <returns>
            A task which is used to execute the projection
            </returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.WriteSnapshot``1(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.ISnapshot,``0)">
            <summary>
            Save the current state of the projection as a snapshot
            </summary>
            <typeparam name="TProjection">
            The type of the projection for which the snapshot is being taken
            </typeparam>
            <param name="snapshot">
            The effective snapshot as of which the snapshot is being taken
            </param>
            <param name="state">
            The state of the projection when snapshotted
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.ConnectionStringName">
            <summary>
            The name of the connection string used to run this projection
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.Exists">
            <summary>
            Does the underlying event stream for this projection exist ?
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.Projection.#ctor(EventSourcingOnAzureFunctions.Common.Binding.ProjectionAttribute,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamSettings,EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionSnapshotReader,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IProjectionSnapshotWriter)">
            <summary>
            Create the projection from the attribute linked to the function parameter
            </summary>
            <param name="attribute">
            The attribute describing which projection to run
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionBase">
            <summary>
            The base class for any projection
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionBase.CurrentSequenceNumber">
            <summary>
            The current sequence number of the last event processed by this projection
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMaps.LoadFromConfig(System.String)">
            <summary>
            Load the projection maps as stored in any configuration files
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMaps.LoadByReflection">
            <summary>
            Load the projection maps by reading the attributes of any IProjection based classes in the existing
            application
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMaps.CreateProjectionClass(System.String)">
            <summary>
            Create the .NET class for a particular projection type from its name
            </summary>
            <param name="projectionName">
            The "business" name of the projection to map to a .NET class
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMaps.CreateDefaultProjectionMaps">
            <summary>
            Create a projections map that is the default for this application
            </summary>
            <remarks>
            This uses both the configuration and reflection to build the maps - if you need faster
            spin-up you should create a hard-coded map and use dependency injection to load it
            </remarks>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMap">
            <summary>
            Mapping between a projection name and the class that implements it
            </summary>
            <remarks>
            Projection names can be domain qualified {domain}.{entity type}.{projection name} if
            needed for uniqueness
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMap.ProjectionName">
            <summary>
            The unique projection name as it is known to the application
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMap.ProjectionImplementationClassName">
            <summary>
            The name of the CLR class that implements that projection
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionMap.#ctor">
            <summary>
            Parameter-less constructor for serialisation
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionNameAttribute">
            <summary>
            Attribute to allow a projection class to be tagged with the projection business name
            </summary>
            <remarks>
            This allows the projection name to be independent of the language used to read/write it for shared event streams
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionNameAttribute.Name">
            <summary>
            The business meaningful name of the projection held in this class
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionSnapshotProperty.Name">
            <summary>
            The unique name of the property (akin to a column header)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionSnapshotProperty.RowNumber">
            <summary>
            The row this property is in 
            </summary>
            <remarks>
            If this is NO_ROW_NUMBER the projection may be one that does not have rows
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionSnapshotProperty.ValueAsObject">
            <summary>
            The value of this projection property
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.EventSourcing.ProjectionSnapshotProperty.Create``1(System.String,``0,System.Int32)">
            <summary>
            Create a type-safe projection snapshot property
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.InjectConfiguration">
            <summary>
            Dependency injection configuration for this Azure functions app
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Listener.Notification.NotificationType">
            <summary>
            The different types of notification that can occur
            </summary>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.Listener.Notification.NotificationType.NewEntity">
            <summary>
            A new entity instance was created
            </summary>
            <remarks>
            This occurs when a new event stream is created
            </remarks>
        </member>
        <member name="F:EventSourcingOnAzureFunctions.Common.Listener.Notification.NotificationType.NewEvent">
            <summary>
            A new event was appended to an event stream
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Listener.Notification.NotificationClassification">
            <summary>
            What type of notification is this
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Listener.Notification.DomainName">
            <summary>
            The name of the domain for which this event occured
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Listener.Notification.EntityTypeName">
            <summary>
            The name of the type of entity for which this event occured
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Listener.Notification.InstanceKey">
            <summary>
            The unique identifier of the entity for which this event occured
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Listener.Notification.EventName">
            <summary>
            The business-meaningful name of the event that has occured
            </summary>
            <remarks>
            This will be blank for a new-entity notification
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Listener.Notification.MatchesFilter(EventSourcingOnAzureFunctions.Common.Listener.Notification.NotificationType,System.String,System.String,System.String,System.String)">
            <summary>
            Check if a notification message matches a set of filter
            conditions tested against it
            </summary>
            <param name="expectedNotificationType">
            If set we expect the notification to be matching this given type
            </param>
            <param name="expectedDomainName">
            If set we expect the notification to be for this given domain
            </param>
            <param name="expectedEntityTypeName">
            If set we expect the notification to be for this given entity type
            </param>
            <param name="expectedEntityKey">
            If set we expect the notification to be for this given enity unique identifier
            </param>
            <param name="expectedEventType">
            If set we expect the notification to be for this given entity event type
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Listener.NotificationQueue">
            <summary>
            The notification queue is where the notifications for events (new entity created or new event written) are posted 
            so that notification listeners can react to them 
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload">
            <summary>
            Content to send in a notification message when a classification completes
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.DomainName">
            <summary>
            The domain in which the classifier was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.EntityTypeName">
            <summary>
            The type of entity against which the classifier was run 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.InstanceKey">
            <summary>
            The unique identifier of the entity over which the classifier was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.ClassificationTypeName">
            <summary>
            The type of the classification that was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.SequenceNumber">
            <summary>
            The sequence number of the last event read in the classification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.AsOfDate">
            <summary>
            The effective date of the last event read in the classification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.Commentary">
            <summary>
            Comments that can be passed for logging / diagnostic or other purpose
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.Result">
            <summary>
            The current result of the classification 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.WasEverIncluded">
            <summary>
            Was this entity ever included according to the classifier
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.WasEverExcluded">
            <summary>
            Was this entity ever excluded according to the classifier
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.Parameters">
            <summary>
            The parameters that were passed to the classification
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.ClassificationCompleteEventGridPayload.#ctor">
            <summary>
            Empty constructor for serialisation
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.DomainName">
            <summary>
            The domain in which the new entity was created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.EntityTypeName">
            <summary>
            The type of entity that was created 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.InstanceKey">
            <summary>
            The unique identifier of the new entity instance that was created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.Commentary">
            <summary>
            Comments that can be passed for logging / diagnostic or other purpose
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.#ctor">
            <summary>
            Empty constructor for serialisation
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.DeletedEntityEventGridPayload.MakeEventTypeName(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Make an event type name for the deleted entity notification message
            </summary>
            <param name="newEntity">
            The newly created entity
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.EventGridEventRouting">
            <summary>
            A wrapper for an event to specify where it is to be 
            sent to
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher">
            <summary>
            Common routines for sending out notifications via event grid when an event sourcing 
            event has occured
            </summary>
            <remarks> 
            Notifications are raised when a new entity is created (i.e. when a new event strem is created) and
            when a new event is appended to an event stream
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.Name">
            <summary>
            The name by which this notification dispatcher is known
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.NewEntityCreated(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            A new entity was created - notify the world
            </summary>
            <param name="newEntity">
            The new entity that has been created
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.ExistingEntityDeleted(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            An entity was deleyed - notify the world
            </summary>
            <param name="newEntity">
            The new entity that has been created
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.NewEventAppended(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.Int32,System.String,System.Object,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            A new event was appended to an event stream - notify the world
            </summary>
            <param name="targetEntity">
            The entity on which event stream the event was appended
            </param>
            <param name="eventType">
            The type of event that occured
            </param>
            <param name="sequenceNumber">
            The sequence number of the new event that was appended
            </param>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.ProjectionCompleted(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.Int32,System.Nullable{System.DateTime},System.Object,System.String)">
            <summary>
            Send a notification that a projection has been run
            </summary>
            <param name="targetEntity">
            The entity instance over which the projection was run
            </param>
            <param name="projectionType">
            The type of the projection that was run
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event in the stream that was read in this projection
            </param>
            <param name="asOfDate">
            (Optional) The as-of date passed to the projection request
            </param>
            <param name="currentValue">
            The value for the state as read by the projection
            </param>
            <param name="commentary">
            (Optional) Additional commentary
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.ClassificationCompleted(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Nullable{System.DateTime},EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse,System.String)">
            <summary>
            A classification completed
            </summary>
            <param name="targetEntity">
            The entity over which the classification process was run
            </param>
            <param name="classificationType">
            The type of the classification
            </param>
            <param name="parameters">
            Any additional parameters used when processing the classification
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event read in processing the classification
            </param>
            <param name="asOfDate">
            The as-of date up to which the classification was ran
            </param>
            <param name="commentary">
            (Optional) Additional commentary to pass with the notification
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.MakeEventGridSubject(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String)">
            <summary>
            Turn an entity identifier into an eventgrid message subject
            </summary>
            <param name="newEntity">
            The entity the message is being sent about
            </param>
            <param name="eventType">
            The name of the event type that we are raising a notification for
            </param>
            <remarks>
            If an event type is specified this will come in front of the instance identifier as that is
            the more useful pattern for filtering
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.MakeEventGridSubjectPart(System.String)">
            <summary>
            Split a multi-part subject part with path separators
            </summary>
            <param name="subjectPart">
            The original subject part with dot separators
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.MakeTraceParent(System.String,System.String)">
            <summary>
            Make a string that can be passed to the W3C Trace header as a trace parent
            </summary>
            <param name="correlationIdentifier">
            The string we used as our correlation identifier 
            </param>
            <param name="causationIdentifier">
            The string we used as our causation identifier
            </param>
            <remarks>
            See https://www.w3.org/TR/trace-context/#examples-of-http-traceparent-headers
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.EventGridNotificationDispatcher.StringToByteArray(System.Int32,System.String)">
            <summary>
            Turn a string into a byte array to make a correlation/causation ID useful for W3C tracing
            </summary>
            <param name="length">
            The length of array we need
            </param>
            <param name="input">
            The source string we are turning into an array
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher">
            <summary>
            Interface describing the methods used to dispatch notifications
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher.Name">
            <summary>
            The unique name of this notification dispatcher
            </summary>
            <remarks>
            This allows them to be accessed by name in calling code
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher.NewEntityCreated(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            Notify that a new entity (or event stream) instance was created
            </summary>
            <param name="newEntity">
            The new entity that was created
            </param>
            <param name="commentary">
            (Optional) Additional commentary for the new entity creation for logging / diagnostics
            </param>
            <param name="context">
            (Optional) The additional context with which the new entity was written
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher.NewEventAppended(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.Int32,System.String,System.Object,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            A new event was appended to an event stream - notify the world
            </summary>
            <param name="targetEntity">
            The entity on which event stream the event was appended
            </param>
            <param name="eventType">
            The type of event that occured
            </param>
            <param name="sequenceNumber">
            The sequence number of the new event that was appended
            </param>
            <param name="commentary">
            (Optional) Additional commentary for the new event for logging / diagnostics
            </param>
            <param name="eventPayload">
            (Optional) The payload content of the event appended to the event stream
            </param>
            <param name="context">
            (Optional) The additional context with which the new event was written
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher.ProjectionCompleted(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.Int32,System.Nullable{System.DateTime},System.Object,System.String)">
            <summary>
            A projection was completed
            </summary>
            <param name="targetEntity">
            The entity on which event stream the projection ran
            </param>
            <param name="projectionType">
            The type of the projection
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event read in processing the projection
            </param>
            <param name="asOfDate">
            The as-of date up to which the rpojection ran
            </param>
            <param name="currentValue">
            The ending projection results when the projection completed
            </param>
            <param name="commentary">
            (Optional) Additional commentary to pass with the notification
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher.ClassificationCompleted(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Nullable{System.DateTime},EventSourcingOnAzureFunctions.Common.EventSourcing.ClassificationResponse,System.String)">
            <summary>
            A classification completed
            </summary>
            <param name="targetEntity">
            The entity over which the classification process was run
            </param>
            <param name="classificationType">
            The type of the classification
            </param>
            <param name="parameters">
            Any additional parameters used when processing the classification
            </param>
            <param name="asOfSequenceNumber">
            The sequence number of the last event read in processing the classification
            </param>
            <param name="asOfDate">
            The as-of date up to which the classification was ran
            </param>
            <param name="commentary">
            (Optional) Additional commentary to pass with the notification
            </param>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.INotificationDispatcher.ExistingEntityDeleted(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IWriteContext)">
            <summary>
            Notify that a new entity (or event stream) instance was deleted
            </summary>
            <param name="deletedEntity">
            The new entity that was deleted
            </param>
            <param name="commentary">
            (Optional) Additional commentary for the new entity deletion for logging / diagnostics
            </param>
            <param name="context">
            (Optional) The additional context with which the entity was deleted
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload">
            <summary>
            Event Grid message payload for a new entity creation notification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.DomainName">
            <summary>
            The domain in which the new entity was created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.EntityTypeName">
            <summary>
            The type of entity that was created 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.InstanceKey">
            <summary>
            The unique identifier of the new entity instance that was created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.Commentary">
            <summary>
            Comments that can be passed for logging / diagnostic or other purpose
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.#ctor">
            <summary>
            Empty constructor for serialisation
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.NewEntityEventGridPayload.MakeEventTypeName(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Make an event type name for the newly created entity notification message
            </summary>
            <param name="newEntity">
            The newly created entity
            </param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload">
            <summary>
            Event Grid message payload for a new event notification
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.DomainName">
            <summary>
            The domain in which the new entity was created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.EntityTypeName">
            <summary>
            The type of entity that was created 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.InstanceKey">
            <summary>
            The unique identifier of the new entity instance that was created
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.Commentary">
            <summary>
            Comments that can be passed for logging / diagnostic or other purpose
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.EventType">
            <summary>
            The type of the event that was appended to the event stream for this entity
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.SequenceNumber">
            <summary>
            The sequence number of the just-added event
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.EventPayload">
            <summary>
            The payload of the event appended to the event stream
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.#ctor">
            <summary>
            Empty constructor for serialisation
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.NewEventEventGridPayload.MakeEventTypeName(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String)">
            <summary>
            Make an event type name for the newly created entity notification message
            </summary>
            <param name="affectedEntity">
            The newly created entity
            </param>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NotificationDispatcherFactory.NotificationDispatchers">
            <summary>
            The static factory-created notification dispatcher
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.NotificationDispatcherFactory.GetDefaultDispatcher">
            <summary>
            A default dispatcher to use if none is specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.NotificationDispatcherFactory.CreateDispatchers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Create any static classes used to dispatch notifications 
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.NullNotificationDispatcher">
            <summary>
            A notification dispatcher that does not do anything
            </summary>
            <remarks>
            This can be used in unit testing or if you have an application that you do not want to 
            do any notification
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.NullNotificationDispatcher.Name">
            <summary>
            The name by which this notification dispatcher is known
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload">
            <summary>
            Event Grid message payload for a projection completed notification
            </summary>
            <remarks>
            This can be used for event carried state transfer or for off-to-the-side
            cacheing
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.NotificationId">
            <summary>
            The notification instance identifier (for logical idempotency checking)
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.DomainName">
            <summary>
            The domain in which the projection was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.EntityTypeName">
            <summary>
            The type of entity against which the projection was run 
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.InstanceKey">
            <summary>
            The unique identifier of the entity over which the projection was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.ProjectionTypeName">
            <summary>
            The type of the projection that was run
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.SequenceNumber">
            <summary>
            The sequence number of the last event read in the projection
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.AsOfDate">
            <summary>
            The effective date of the last event read in the projection
            </summary>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.Commentary">
            <summary>
            Comments that can be passed for logging / diagnostic or other purpose
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.ProjectionCompleteEventGridPayload.#ctor">
            <summary>
            Empty constructor for serialisation
            </summary>
        </member>
        <member name="T:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher">
            <summary>
            Common routines for sending out notifications via named queues when an event sourcing 
            event has occured
            </summary>
            <remarks> 
            Notifications are raised when a new entity is created (i.e. when a new event strem is created) and
            when a new event is appended to an event stream.
            Due to the small size of messages that can be put on queues (64kb) these notifications are
            not used for event carried state transfer so have no payload.
            </remarks>
        </member>
        <member name="P:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher.Name">
            <summary>
            The name by which this notification dispatcher is known
            </summary>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher.SendQueueMessage(System.String,System.String,System.String)">
            <summary>
            Send the given message to the specified queue 
            </summary>
            <param name="connectionStringName">
            The name of the connection string to use to connect to the queue
            </param>
            <param name="queueName">
            The name of the queue to post the message to
            </param>
            <param name="messageToSend">
            The message to put on the queue
            </param>
            <remarks>
            If the queue does not exist it will be created
            </remarks>
        </member>
        <member name="M:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher.MakeQueueName(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity)">
            <summary>
            Turn the identity of an event stream backed entity into the name of a 
            queue down which the notifications about that entity should be posted
            </summary>
            <param name="targetEntity">
            The entity for which a notification has occurred
            </param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EventSourcingOnAzureFunctions.Common.Notification.QueueNotificationDispatcher.MakeMessageString(EventSourcingOnAzureFunctions.Common.EventSourcing.Interfaces.IEventStreamIdentity,System.String,System.String,System.Int32,System.Nullable{System.DateTime})" -->
    </members>
</doc>
